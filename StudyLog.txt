---------
#250416

[Review]
bool  learning::Intersect(ColliderCircle const& lhs, ColliderCircle const& rhs)
{
	return (rhs.center - lhs.center).LengthSquared() <= pow(lhs.radius + rhs.radius, 2);
}

여깄다 써야 될 함수

"ColliderCircle " 이거 2개


m_EnemySpawnPos = { 0, 0 };

여깄다  lhs

아니네;;;

        //---
        ColliderCircle* circle = dynamic_cast<ColliderCircle*>(m_GameObjectPtrTable[i]);
        Intersect(circle, circle);
        //---

왜 아닐까? 
어제 캡슐 찔러 볼 떄도 그렇고, 오늘 읽어봐도 여기 밖에 넣을 때가 없어. 
근데 안돼? 맞아. 근데 그 이유는 캡슐의 위치가 아니라 cpp를 몰라서야. 


[Do]
과제 두개 모두 완료 ? 
1. flag에 따라서 구현... 
2.  circleCollider로 받아옴

---------
#250411

[Review]
11시:
어제의 생각은 삽질인 것 같다. 가장 중요한 것은 루프다. 흠...
짜치는 걸 메인에서 뺀다. 
그러기 위해서 변수가 뭘로 같을까? 
21시:
cpp를 모른다. 그 설명이 딱 맞았다. 인스턴스를 안만들고 클래스 갖고왔잖아 함수 줘ㅓㅓㅓ라며 땡깡 부리던 시간이 하루였다니;;
앞으로 남은 분리는 랜더링. 아직 랜더링함수를 이해하지 못했다. 


[Do]
WindowManager 헤더, 소스 파일 분리 -
GameManager 헤더, 소스 파일 분리

---------
#250410

[Review]
동그라미와 네모를 랜덤으로 출력은 하긴 한다. 하지만 내가 느끼기에 랜더링 루프안에 넣었기 때문에 게임 루프를 만든 게 무의미하게끔 짰다. 이를 수정해야 한다.

현재, GameTimer, GeoShapeManager, 연습장 이렇게 세개로 나누어져있다. 
연습장을 input, render로 추가해 나누고 싶다.

[Do]
1. 일단 랜더링 루프에서 동그라미 네모 랜덤 출력
1. GeoShapeManager 헤더와 cpp파일을 수정 - 헤더에 구현된 걸 cpp로 옮김, 싱글톤 패턴으로 extern 대체



----------
#250409

공부 일지를 남기라는 리드미를 지금 읽어 이렇게 급히 남깁니다. 문제를 푸는 과정에서 2가지 요소에 고민을 했었습니다.

1. 생성된 배열의 인자에 어떻게 접근할까?
	결국 입력단계에서 얻을 수 있는 것은 x와 y좌표이기 때문에 그것을 통해 각 도형의 중점을 확인할 수 있습니다. 

2. 업캐스팅이 존재한다면 다운캐스팅도 존재할까? 
	하지만 중점을 인자로 받아도, 배열의 원래 클래스를 알지 못합니다. 다행히도 파리미터가 다릅니다.  때문에 형변환을 다시 자식으로 바꾸면 해결됩니다. 만약 인자수가 같다면 새로운 인자를 만들어 구별하게끔 수정해야 할 것같습니다. 